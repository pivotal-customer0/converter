#!env ruby
require 'yaml'
require 'optparse'
require 'converter/flavor_maker'
require 'converter/yaml_helper'
require 'converter/authentication'
require 'converter/cf_domain'
require 'converter/cf_network'
require 'converter/cf_portgroup'
require 'converter/replacement_pair'
require 'converter/cf_job_name_cleaner'

options = {}
options[:password] = 'admin'
options[:ip_ranges] = []


opts = OptionParser.new do |opts|
  opts.banner = 'Usage: bundle exec converter [options]'

  opts.on('--manifest MANIFEST', 'Specifies the manifest to convert') do |v| options[:manifest] = v end

  opts.on('--name NAME', 'release name (e.g. --name redis)') do |v| options[:name] = v end

  opts.on('--password PASSWORD', 'password to use in new manifest, defaults to "admin"') do |v|
    options[:password] = v
  end

  opts.on('--domain NEW_DOMAIN',
          'Replaces domains in the manifest with the new domain',
          'take heed, this is a simple string replace, adding "https://" is probably wrong') do |v|
    options[:domain] = v
  end

  opts.on('--swap-ip-ranges OLD_RANGE1:NEW_RANGE1,OLD_RANGE2:NEW_RANGE2',
          'Replaces ips on the left with ips on the right and will accept a comma separated list of ranges to swap',
          'Examples:',
            "\t--swap-ip-ranges 10.65.170:10.65.172",
            "\t--swap-ip-ranges 10.65.170:10.65.172,10.65.171:10.65.173",
          'take heed, this is a simple string replace') do |v|
    v.split(',').each do |range|
      o = range.split(':')
      options[:ip_ranges].push(ReplacementPair.new(o[0], o[1]))
    end
  end

  opts.on('--output-path PATH', 'where should we put the new manifest.',
          'Defaults to <name>-photon.yml in the current directory') do |v|
    options[:output_path] = v
  end

  opts.on('--sanitize-partition', 'The thing opsman does with the guid after the partition makes sense for a machine',
    'but it makes life hard for a human when reading. This flag drops it'
  ) do |v|
    options[:sanitize_partition] = true
  end

  opts.on('--dns DNS', 'Overwrite (no matching) DNS with argument. If not provided we leave whatevers in the',
          'manifest alone.') do |v|
    options[:dns] = v
  end
  
  opts.on('--portgroup PortGrp', 'Overwrite Donor Network (no matching). If not provided we leave whatevers in the',
          'manifest alone.') do |v|
    options[:portgrp] = v
  end

  options[:help] = opts.help

end
opts.parse!

if options[:name].nil? or options[:manifest].nil?
  puts options[:help]
  exit(1)
end

name = options[:name]
if options[:output_path].nil?
  options[:output_path] = name + '-photon.yml'
end

# The hot mess below is why we should script while watching moves... this whole thing is a "could we" experiment
# it appears the approach is viable but the tool requires more investment.

def swap_stemcells(yaml)
  yaml.each_key do | key |
    if key == 'stemcell'
      yaml[key] = {
          'name' =>  'bosh-esxcloud-esxi-ubuntu-trusty-go_agent',
          'version' => '0001'
      }
    elsif yaml[key].is_a? Hash
      swap_stemcells(yaml[key])
    elsif yaml[key].is_a? Array
      yaml[key].each do |value|
        swap_stemcells(value) if value.is_a? Hash
      end
    end #TODO this logic misses arrays of arrays which for now does not seem to hurt
  end
end

###############################################################################
# script starts here
###############################################################################
node = YAML.load_file options[:manifest]

node['resource_pools'].each do |v|
  FlavorMaker.convert_vsphere_cloud_props_to_photon v
end

FlavorMaker.convert_vsphere_cloud_props_to_photon node['compilation']

node['disk_pools'].each_with_index do |v|
  FlavorMaker.convert_vsphere_disk_pool_to_photon v
end

node['name'] = "#{name}-photon"

if 'cf' == name
  Authentication.set_cf_admin_password node, options[:password]
else
  Authentication.set_cf_admin_password_for_errands(node, options[:password])
end

unless options[:domain].nil?
  CFDomain.change_domain node, options[:domain]
end

unless options[:ip_ranges].nil?
  CFNetwork.replace_ip_ranges node, options[:ip_ranges]
end

unless options[:dns].nil?
   CFNetwork.set_dns node, options[:dns]
end

unless options[:portgrp].nil?
   CFPortGroup.set_portgrp node, options[:portgrp]
end

if options[:sanitize_partition]
  CFJobNameCleaner.remove_guid(node)
end

#TODO We don't let anyone change the stemcell yet became we only have the one.
swap_stemcells node
File.open(options[:output_path], 'w') { |f| YAML.dump(node, f) }

